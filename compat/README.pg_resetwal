Note that the bdr_resetwal tool is nothing but pg_resetwal of core postgres
plus additional changes shown as diff in this README file.

While porting BDR to higher postgres versions:
1. Copy pg_resetwal source code files from postgres src/bin/pg_resetwal
directory to compat/PG_VERSION/pg_resetwal directory.
2. Apply the diff (search for the diff code in the previous versions of
pg_resetwal code in compat/PG_VERSION-previous/pg_resetwal to understand where
the code fits in newer versions) shown in this README file to respective files
under compat/PG_VERSION/pg_resetwal directory.

XXX: It might be worth doing this a bit differently - either a dedicated tool
for BDR that sets system_identifier and other needed fields or a compile-time
script that pulls in the pg_resetwal.c from postgres source directory and
applies the diff builds (but a caveat here - BDR will lose self-reliance,
meaning, one can't build BDR source code without postgres source code
specified) or we might as well push system_identifier setting to upstream
pg_resetwal (but a caveat here - it's a bit hard to build the case and even if
we do so, no backporting). Hence, a better way as of this writing is a
dedicated BDR tool that works across postgres versions, but that's for another
day.

bdr_resetwal diff from core pg_resetwal:
========================================
--- postgres/src/bin/pg_resetwal/pg_resetwal.c     2023-03-30 05:11:14.514161314 +0000
+++ bdr/compat/11/pg_resetwal/pg_resetwal.c    2023-03-30 10:30:27.527248532 +0000
@@ -33,6 +33,11 @@
  * backend-only stuff in the XLOG include files we need.  But we need a
  * frontend-ish environment otherwise.  Hence this ugly hack.
  */
+
+/*
+ * NB: This version is patched to call its self bdr_resetwal and add a
+ * -s or system-identifier option to reset the system_identifier.
+ */
 #define FRONTEND 1
 
 #include "postgres.h"
@@ -75,6 +80,7 @@
 static XLogSegNo minXlogSegNo = 0;
 static int     WalSegSz;
 static int     set_wal_segsize;
+static uint64 set_sysid = 0;
 
 static void CheckDataVersion(void);
 static bool ReadControlFile(void);
@@ -102,6 +108,7 @@
                {"dry-run", no_argument, NULL, 'n'},
                {"next-oid", required_argument, NULL, 'o'},
                {"multixact-offset", required_argument, NULL, 'O'},
+               {"system-identifier", required_argument, NULL, 's'},
                {"oldest-transaction-id", required_argument, NULL, 'u'},
                {"next-transaction-id", required_argument, NULL, 'x'},
                {"wal-segsize", required_argument, NULL, 1},
@@ -118,7 +125,7 @@
        char       *log_fname = NULL;
        int                     fd;
 
-       set_pglocale_pgservice(argv[0], PG_TEXTDOMAIN("pg_resetwal"));
+       set_pglocale_pgservice(argv[0], PG_TEXTDOMAIN("bdr_resetwal"));
 
        progname = get_progname(argv[0]);
 
@@ -131,13 +138,13 @@
                }
                if (strcmp(argv[1], "--version") == 0 || strcmp(argv[1], "-V") == 0)
                {
-                       puts("pg_resetwal (PostgreSQL) " PG_VERSION);
+                       puts("bdr_resetwal (PostgreSQL) " PG_VERSION);
                        exit(0);
                }
        }
 
 
-       while ((c = getopt_long(argc, argv, "c:D:e:fl:m:no:O:u:x:", long_options, NULL)) != -1)
+       while ((c = getopt_long(argc, argv, "c:D:e:fl:m:no:O:s:u:x:", long_options, NULL)) != -1)
        {
                switch (c)
                {
@@ -295,6 +302,20 @@
                                }
                                break;
 
+            case 's':
+                if (sscanf(optarg, UINT64_FORMAT, &set_sysid) != 1)
+                {
+                    fprintf(stderr, _("%s: invalid argument for option -s\n"), progname);
+                    fprintf(stderr, _("Try \"%s --help\" for more information.\n"), progname);
+                    exit(1);
+                }
+                               if (set_sysid == 0)
+                               {
+                                       fprintf(stderr, _("%s: system identifier (-s) must not be 0\n"), progname);
+                                       exit(1);
+                               }
+                break;
+
                        case 'l':
                                if (strspn(optarg, "01234567890ABCDEFabcdef") != XLOG_FNAME_LEN)
                                {
@@ -492,6 +513,9 @@
        if (minXlogSegNo > newXlogSegNo)
                newXlogSegNo = minXlogSegNo;
 
+    if (set_sysid != 0)
+        ControlFile.system_identifier = set_sysid;
+
        /*
         * If we had to guess anything, and -f was not given, just print the
         * guessed values and exit.  Also print if -n is given.
@@ -1330,6 +1354,7 @@
        printf(_("  -n, --dry-run                    no update, just show what would be done\n"));
        printf(_("  -o, --next-oid=OID               set next OID\n"));
        printf(_("  -O, --multixact-offset=OFFSET    set next multitransaction offset\n"));
+       printf(_("  -s, --system-identifier=SYSID    set system identifier\n"));
        printf(_("  -u, --oldest-transaction-id=XID  set oldest transaction ID\n"));
        printf(_("  -V, --version                    output version information, then exit\n"));
        printf(_("  -x, --next-transaction-id=XID    set next transaction ID\n"));
