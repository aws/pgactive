diff --git a/compat/15/pg_resetwal/pg_resetwal.c b/compat/15/pg_resetwal/pg_resetwal.c
index d4772a2..a16d18a 100644
--- a/compat/15/pg_resetwal/pg_resetwal.c
+++ b/compat/15/pg_resetwal/pg_resetwal.c
@@ -33,6 +33,11 @@
  * backend-only stuff in the XLOG include files we need.  But we need a
  * frontend-ish environment otherwise.  Hence this ugly hack.
  */
+
+/*
+ * NB: This version is patched to call its self bdr_resetwal and add a
+ * -s or system-identifier option to reset the system_identifier.
+ */
 #define FRONTEND 1
 
 #include "postgres.h"
@@ -75,6 +80,7 @@ static uint32 minXlogTli = 0;
 static XLogSegNo minXlogSegNo = 0;
 static int	WalSegSz;
 static int	set_wal_segsize;
+static uint64 set_sysid = 0;
 
 static void CheckDataVersion(void);
 static bool read_controlfile(void);
@@ -102,6 +108,7 @@ main(int argc, char *argv[])
 		{"dry-run", no_argument, NULL, 'n'},
 		{"next-oid", required_argument, NULL, 'o'},
 		{"multixact-offset", required_argument, NULL, 'O'},
+		{"system-identifier", required_argument, NULL, 's'},
 		{"oldest-transaction-id", required_argument, NULL, 'u'},
 		{"next-transaction-id", required_argument, NULL, 'x'},
 		{"wal-segsize", required_argument, NULL, 1},
@@ -119,7 +126,7 @@ main(int argc, char *argv[])
 	int			fd;
 
 	pg_logging_init(argv[0]);
-	set_pglocale_pgservice(argv[0], PG_TEXTDOMAIN("pg_resetwal"));
+	set_pglocale_pgservice(argv[0], PG_TEXTDOMAIN("bdr_resetwal"));
 	progname = get_progname(argv[0]);
 
 	if (argc > 1)
@@ -131,13 +138,13 @@ main(int argc, char *argv[])
 		}
 		if (strcmp(argv[1], "--version") == 0 || strcmp(argv[1], "-V") == 0)
 		{
-			puts("pg_resetwal (PostgreSQL) " PG_VERSION);
+			puts("bdr_resetwal (PostgreSQL) " PG_VERSION);
 			exit(0);
 		}
 	}
 
 
-	while ((c = getopt_long(argc, argv, "c:D:e:fl:m:no:O:u:x:", long_options, NULL)) != -1)
+	while ((c = getopt_long(argc, argv, "c:D:e:fl:m:no:O:s:u:x:", long_options, NULL)) != -1)
 	{
 		switch (c)
 		{
@@ -274,6 +281,20 @@ main(int argc, char *argv[])
 					pg_fatal("multitransaction offset (-O) must not be -1");
 				break;
 
+			case 's':
+				if (sscanf(optarg, UINT64_FORMAT, &set_sysid) != 1)
+				{
+					pg_log_error("invalid argument for option %s", "-s");
+					pg_log_error_hint("Try \"%s --help\" for more information.", progname);
+					exit(1);
+				}
+				if (set_sysid == 0)
+				{
+					pg_fatal("system identifier (-s) must not be 0");
+					exit(1);
+				}
+				break;
+
 			case 'l':
 				if (strspn(optarg, "01234567890ABCDEFabcdef") != XLOG_FNAME_LEN)
 				{
@@ -455,6 +476,8 @@ main(int argc, char *argv[])
 	if (minXlogSegNo > newXlogSegNo)
 		newXlogSegNo = minXlogSegNo;
 
+	if (set_sysid != 0)
+		ControlFile.system_identifier = set_sysid;
 	/*
 	 * If we had to guess anything, and -f was not given, just print the
 	 * guessed values and exit.  Also print if -n is given.
@@ -1145,6 +1168,7 @@ usage(void)
 	printf(_("  -n, --dry-run                    no update, just show what would be done\n"));
 	printf(_("  -o, --next-oid=OID               set next OID\n"));
 	printf(_("  -O, --multixact-offset=OFFSET    set next multitransaction offset\n"));
+	printf(_("  -s, --system-identifier=SYSID    set system identifier\n"));
 	printf(_("  -u, --oldest-transaction-id=XID  set oldest transaction ID\n"));
 	printf(_("  -V, --version                    output version information, then exit\n"));
 	printf(_("  -x, --next-transaction-id=XID    set next transaction ID\n"));
