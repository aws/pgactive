\c postgres
SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 f
(1 row)

\set VERBOSITY terse
-- Verify an error case with the use of non-pgactive foreign data wrapper
CREATE FOREIGN DATA WRAPPER dummy;
CREATE SERVER dummy_fs FOREIGN DATA WRAPPER dummy;
CREATE USER MAPPING FOR public SERVER dummy_fs;
SELECT pgactive.pgactive_create_group(node_name := 'dummy_node',
	node_dsn := 'user_mapping=public pgactive_foreign_server=dummy_fs',
	replication_sets := ARRAY['for_dummy_node']);
ERROR:  foreign data wrapper "dummy_fs" is not based on pgactive_fdw
\set VERBOSITY default
SELECT pgactive.pgactive_create_group(
	node_name := 'node-pg',
	node_dsn := 'dbname=postgres',
	replication_sets := ARRAY['default', 'important', 'for-node-1']
	);
 pgactive_create_group 
-----------------------
 
(1 row)

SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 t
(1 row)

SELECT pgactive.pgactive_wait_for_node_ready();
NOTICE:  checking status of pgactive.pgactive_create_group
NOTICE:  successfully created first node in pgactive group
 pgactive_wait_for_node_ready 
------------------------------
 
(1 row)

SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 t
(1 row)

\c regression
SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 f
(1 row)

SELECT pgactive.pgactive_join_group(
	node_name := 'node-regression',
	node_dsn := 'dbname=regression',
	join_using_dsn := 'dbname=postgres',
	replication_sets := ARRAY['default', 'important', 'for-node-2', 'for-node-2-insert', 'for-node-2-update', 'for-node-2-delete']
	);
 pgactive_join_group 
---------------------
 
(1 row)

SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 t
(1 row)

SELECT * FROM  pgactive.pgactive_get_global_locks_info();
ERROR:  database with oid=16385 is not configured for pgactive or pgactive is still starting up
-- Silence dynamic messages here
SET client_min_messages = 'ERROR';
SELECT pgactive.pgactive_wait_for_node_ready();
 pgactive_wait_for_node_ready 
------------------------------
 
(1 row)

RESET client_min_messages;
SELECT pgactive.pgactive_is_active_in_db();
 pgactive_is_active_in_db 
--------------------------
 t
(1 row)

SELECT owner_replorigin, (owner_sysid, owner_timeline, owner_dboid) = pgactive.pgactive_get_local_nodeid(), lock_mode, lock_state, owner_local_pid = pg_backend_pid() AS owner_pid_is_me, lockcount, npeers, npeers_confirmed, npeers_declined, npeers_replayed, replay_upto IS NOT NULL AS has_replay_upto FROM pgactive.pgactive_get_global_locks_info();
 owner_replorigin | ?column? | lock_mode | lock_state | owner_pid_is_me | lockcount | npeers | npeers_confirmed | npeers_declined | npeers_replayed | has_replay_upto 
------------------+----------+-----------+------------+-----------------+-----------+--------+------------------+-----------------+-----------------+-----------------
                  | f        |           | nolock     | f               |         0 |      1 |                0 |               0 |               0 | f
(1 row)

-- Make sure we see two slots and two active connections
SELECT plugin, slot_type, database, active FROM pg_replication_slots;
  plugin  | slot_type |  database  | active 
----------+-----------+------------+--------
 pgactive | logical   | postgres   | t
 pgactive | logical   | regression | t
(2 rows)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     2
(1 row)

\c postgres
SELECT conn_dsn, conn_replication_sets FROM pgactive.pgactive_connections ORDER BY conn_dsn;
     conn_dsn      |                                conn_replication_sets                                 
-------------------+--------------------------------------------------------------------------------------
 dbname=postgres   | {default,important,for-node-1}
 dbname=regression | {default,important,for-node-2,for-node-2-insert,for-node-2-update,for-node-2-delete}
(2 rows)

SELECT node_status, node_dsn, node_init_from_dsn FROM pgactive.pgactive_nodes ORDER BY node_dsn;
 node_status |     node_dsn      | node_init_from_dsn 
-------------+-------------------+--------------------
 r           | dbname=postgres   | 
 r           | dbname=regression | dbname=postgres
(2 rows)

SELECT 1 FROM pg_replication_slots WHERE restart_lsn <= confirmed_flush_lsn;
 ?column? 
----------
        1
        1
(2 rows)

\c regression
SELECT conn_dsn, conn_replication_sets FROM pgactive.pgactive_connections ORDER BY conn_dsn;
     conn_dsn      |                                conn_replication_sets                                 
-------------------+--------------------------------------------------------------------------------------
 dbname=postgres   | {default,important,for-node-1}
 dbname=regression | {default,important,for-node-2,for-node-2-insert,for-node-2-update,for-node-2-delete}
(2 rows)

SELECT node_status, node_dsn, node_init_from_dsn FROM pgactive.pgactive_nodes ORDER BY node_dsn;
 node_status |     node_dsn      | node_init_from_dsn 
-------------+-------------------+--------------------
 r           | dbname=postgres   | 
 r           | dbname=regression | dbname=postgres
(2 rows)

SELECT 1 FROM pg_replication_slots WHERE restart_lsn <= confirmed_flush_lsn;
 ?column? 
----------
        1
        1
(2 rows)

SELECT pgactive.pgactive_replicate_ddl_command($DDL$
CREATE VIEW public.ddl_info AS
SELECT
	owner_replorigin,
	(owner_sysid, owner_timeline, owner_dboid) = pgactive.pgactive_get_local_nodeid() AS is_my_node,
	lock_mode,
	lock_state,
	owner_local_pid IS NOT NULL AS owner_pid_set,
	owner_local_pid = pg_backend_pid() AS owner_pid_is_me,
	lock_state = 'acquire_acquired' AND owner_local_pid = pg_backend_pid() AS fully_owned_by_me,
	lockcount,
	npeers,
	npeers_confirmed,
	npeers_declined,
	npeers_replayed,
	replay_upto IS NOT NULL AS has_replay_upto
FROM pgactive.pgactive_get_global_locks_info();
$DDL$);
 pgactive_replicate_ddl_command 
--------------------------------
 
(1 row)

BEGIN;
SELECT * FROM ddl_info;
 owner_replorigin | is_my_node | lock_mode | lock_state | owner_pid_set | owner_pid_is_me | fully_owned_by_me | lockcount | npeers | npeers_confirmed | npeers_declined | npeers_replayed | has_replay_upto 
------------------+------------+-----------+------------+---------------+-----------------+-------------------+-----------+--------+------------------+-----------------+-----------------+-----------------
                  | f          |           | nolock     | t             | f               | f                 |         0 |      1 |                0 |               0 |               0 | f
(1 row)

SELECT pgactive.pgactive_replicate_ddl_command($DDL$
CREATE OR REPLACE FUNCTION public.pgactive_regress_variables(
    OUT readdb1 text,
    OUT readdb2 text,
    OUT writedb1 text,
    OUT writedb2 text
    ) RETURNS record LANGUAGE SQL AS $f$
SELECT
    current_setting('pgactivetest.readdb1'),
    current_setting('pgactivetest.readdb2'),
    current_setting('pgactivetest.writedb1'),
    current_setting('pgactivetest.writedb2')
$f$;
$DDL$);
 pgactive_replicate_ddl_command 
--------------------------------
 
(1 row)

SELECT * FROM ddl_info;
 owner_replorigin | is_my_node | lock_mode |    lock_state    | owner_pid_set | owner_pid_is_me | fully_owned_by_me | lockcount | npeers | npeers_confirmed | npeers_declined | npeers_replayed | has_replay_upto 
------------------+------------+-----------+------------------+---------------+-----------------+-------------------+-----------+--------+------------------+-----------------+-----------------+-----------------
                0 | t          | ddl_lock  | acquire_acquired | f             |                 |                   |         1 |      1 |                0 |               0 |               0 | f
(1 row)

COMMIT;
SELECT * FROM ddl_info;
 owner_replorigin | is_my_node | lock_mode | lock_state | owner_pid_set | owner_pid_is_me | fully_owned_by_me | lockcount | npeers | npeers_confirmed | npeers_declined | npeers_replayed | has_replay_upto 
------------------+------------+-----------+------------+---------------+-----------------+-------------------+-----------+--------+------------------+-----------------+-----------------+-----------------
                  | f          |           | nolock     | t             | f               | f                 |         0 |      1 |                0 |               0 |               0 | f
(1 row)

-- Run the upgrade function, even though we started with 2.0, so we exercise it
-- and so we know it won't break things when run on a 2.0 cluster.
SELECT pgactive.pgactive_assign_seq_ids_post_upgrade();
 pgactive_assign_seq_ids_post_upgrade 
--------------------------------------
 
(1 row)

-- Verify utility functions to handle pgactive statuses
SELECT
  c::"char" AS status_char,
  pgactive.pgactive_node_status_from_char(c::"char") AS status_str,
  pgactive.pgactive_node_status_to_char(pgactive.pgactive_node_status_from_char(c::"char")) AS roundtrip_char
FROM (VALUES ('b'),('i'),('c'),('o'),('r'),('k')) x(c)
ORDER BY c;
 status_char |                  status_str                  | roundtrip_char 
-------------+----------------------------------------------+----------------
 b           | pgactive_NODE_STATUS_BEGINNING_INIT          | b
 c           | pgactive_NODE_STATUS_CATCHUP                 | c
 i           | pgactive_NODE_STATUS_COPYING_INITIAL_DATA    | i
 k           | pgactive_NODE_STATUS_KILLED                  | k
 o           | pgactive_NODE_STATUS_CREATING_OUTBOUND_SLOTS | o
 r           | pgactive_NODE_STATUS_READY                   | r
(6 rows)

-- Verify that there are some stats already
SELECT COUNT(*) > 0 AS ok FROM pgactive.pgactive_stats;
 ok 
----
 t
(1 row)

