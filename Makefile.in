# -*-makefile-*-
# Makefile.in
# @configure_input@

# configure output
BDR_PGVERCOMPAT_INCDIR=@BDR_PGVERCOMPAT_INCDIR@
BDR_PG_MAJORVERSION=@BDR_PG_MAJORVERSION@
# end configure output

bdr_subdir = .
bdr_top_builddir = .

MODULE_big = bdr
EXTENSION = bdr
DATA = extsql/bdr--2.0.7.0.sql
DOCS = README.bdr
SCRIPTS_built = bdr_init_copy bdr_dump
EXTRA_CLEAN = bdr_init_copy$(X) bdr_init_copy.o bdr_version.h .distgitrev \
	tmp_check results log tmp_tap_tests regression.diffs regression.out \
	bdr_init_copy_postgres.log home tmp_test_* \
	bdr_dump$(X) $(BDR_DUMP_OBJS) \
	${distdir}.tar.bz2

# When in development add -Werror.
PG_CPPFLAGS = -I$(srcdir)/$(BDR_PGVERCOMPAT_INCDIR) -I$(libpq_srcdir) -Wall -Wmissing-prototypes -Wmissing-declarations $(EXTRA_CFLAGS)
SHLIB_LINK = $(libpq)

OBJS = bdr.o \
	bdr_apply.o \
	bdr_dbcache.o \
	bdr_ddlrep.o \
	bdr_ddlrep_truncate.o \
	bdr_perdb.o \
	bdr_catalogs.o \
	bdr_conflict_handlers.o \
	bdr_conflict_logging.o \
	bdr_commandfilter.o \
	bdr_common.o \
	bdr_compat.o \
	bdr_count.o \
	bdr_executor.o \
	bdr_init_replica.o \
	bdr_locks.o \
	bdr_nodecache.o \
	bdr_messaging.o \
	bdr_monitoring.o \
	bdr_output.o \
	bdr_output_origin_filter.o \
	bdr_protocol.o \
	bdr_relcache.o \
	bdr_remotecalls.o \
	bdr_seq.o \
	bdr_shmem.o \
	bdr_supervisor.o \
	bdr_upgrade.o

ifdef RUN_FAILING_TESTS
# Empty if there aren't any expected-to-fail tests at the moment.
FAILING_TESTS :=
else
# By default we don't run failing tests, this will always be empty.
FAILING_TESTS :=
endif

# DDL tests run via transparent DDL replication.
DDLTESTS := ddl_enable_ddl \
	ddl_create \
	ddl_alter_table \
	ddl_extension \
	ddl_function \
	ddl_grant \
	ddl_mixed \
	ddl_namespace \
	ddl_sequence \
	ddl_replication_set \
	ddl_view \
	ddl_disable_ddl

# DDL tests run via bdr.bdr_replicate_ddl_command wrapper.
DDLTESTS_FUNC := ddl_fn/ddl_enable_ddl \
	ddl_fn/ddl_create \
	ddl_fn/ddl_alter_table \
	ddl_fn/ddl_extension \
	ddl_fn/ddl_function \
	ddl_fn/ddl_grant \
	ddl_fn/ddl_mixed \
	ddl_fn/ddl_namespace \
	ddl_fn/ddl_sequence \
	ddl_fn/ddl_replication_set \
	ddl_fn/ddl_view \
	ddl_fn/ddl_disable_ddl

REGRESSCHECKS = init \
	preseed \
	init_bdr \
	status \
	guc \
	schema \
	preseed_check \
	supervisordb \
	identifier \
	schema_desync \
	replorigin_filter \
	pause \
	catalog \
	terminate \
	skipchanges \
	seq \
	read_only \
	$(FAILING_TESTS) \
	ddl_lock \
	$(DDLTESTS) \
	$(DDLTESTS_FUNC) \
	dml_basic \
	dml_contrib \
	dml_delete_pk \
	dml_extended \
	dml_replicate_ddl_command \
	dml_missing_pk \
	dml_toasted \
	part_bdr

include Makefile.global

$(info Building against PostgreSQL $(MAJORVERSION))

export PG_CONFIG
export PATH

# Modules such as pg_trgm, cube and hstore are used by BDR in tests, i.e. if
# they aren't available the tests start to fail. Therefore, it is not required
# to error out.
REQUIRED_TEST_EXTENSIONS = pg_trgm cube hstore

BDR_DUMP_DIR := compat/$(BDR_PG_MAJORVERSION)/pg_dump
BDR_DUMP_OBJS = $(BDR_DUMP_DIR)/pg_dump.o \
	$(BDR_DUMP_DIR)/common.o \
	$(BDR_DUMP_DIR)/pg_dump_sort.o \
	$(BDR_DUMP_DIR)/pg_backup_archiver.o \
	$(BDR_DUMP_DIR)/pg_backup_db.o \
	$(BDR_DUMP_DIR)/pg_backup_custom.o \
	$(BDR_DUMP_DIR)/pg_backup_null.o \
	$(BDR_DUMP_DIR)/pg_backup_tar.o \
	$(BDR_DUMP_DIR)/pg_backup_directory.o \
	$(BDR_DUMP_DIR)/pg_backup_utils.o \
	$(BDR_DUMP_DIR)/parallel.o \
	$(BDR_DUMP_DIR)/compress_io.o \
	$(BDR_DUMP_DIR)/dumputils.o

# string_utils.c file is needed by pg_dump so we copied it from postgres source
# code src/fe_utils/ and placed it under compat/$(BDR_PG_MAJORVERSION)/pg_dump
# to make pg_dump a self-reliant component while compiling BDR source code.
BDR_DUMP_OBJS += $(BDR_DUMP_DIR)/string_utils.o

bdr_dump: $(BDR_DUMP_OBJS)
	$(CC) $(CFLAGS) $(BDR_DUMP_OBJS) $(libpq_pgport) $(LDFLAGS) $(LDFLAGS_EX) -lz -lpgfeutils -o $@$(X)

bdr_init_copy: bdr_init_copy.o bdr_common.o
	$(CC) $(CFLAGS) $^ $(LDFLAGS) $(LDFLAGS_EX) $(libpq_pgport) -o $@$(X)

DATE=$(shell date "+%Y-%m-%d")
GITHASH=$(shell if [ -e .distgitrev ]; then cat .distgitrev; else GIT_DIR=${bdr_abs_srcdir}/.git git rev-parse --short HEAD; fi)

bdr_version.h: bdr_version.h.in
	sed '0,/BDR_VERSION_DATE/s,\(BDR_VERSION_DATE\).*,\1 "$(DATE)",;0,/BDR_VERSION_GITHASH/s,\(BDR_VERSION_GITHASH\).*,\1 "$(GITHASH)",' $< >$@

bdr.o: bdr_version.h

# Ensure Makefiles are up2date (should we move this to Makefile.global?)
Makefile: Makefile.in config.status configure
	./config.status $@

Makefile.global: Makefile.global.in config.status configure
	./config.status $@

run_tests: run_tests.in  config.status configure
	./config.status $@

configure: configure.in
	cd ${bdr_abs_srcdir} && autoreconf

all: bdr_init_copy bdr_dump

check: regress_check prove_check

regress_check: all install
	mkdir -p results/ddl results/ddl_fn results/dml

	./run_tests --config $(bdr_abs_srcdir)/bdr_regress.conf \
		--testbinary src/test/regress/pg_regress \
		$(REGRESSCHECKS)

# To run prove, we need to install a couple of things that are not usually
# copied from the postgres source tree to the install tree, namely all of
# src/test/perl needs to be copied to lib/postgresql/pgxs/src/test/perl/.
#
# This isn't done by postgres's install command, which doesn't know how to
# install them. So you'll have to copy them manually or patch your postgres
# tree to install them:
# https://www.postgresql.org/message-id/CAMsr%2BYFXv%2B2qne6xJW7z_25mYBtktRX5rpkrgrb%2BDRgQ_FxgHQ@mail.gmail.com
ifeq ($(shell test $(MAJORVERSION) -ge 15; echo $$?),0)
$(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm:
	@[ -e $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm ] || ( echo -e "----ERROR----\nCannot run prove_check, copy src/test/perl/* to $(pgxsdir)/src/test/perl/ and retry\n-------------" && exit 1)

prove_check: $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm
	$(MAKE) -C bdr_toy -f ${bdr_abs_srcdir}/bdr_toy/Makefile VPATH=${bdr_abs_srcdir}/bdr_toy install
	rm -rf $(CURDIR)/tmp_check/
	cd $(srcdir) && TESTDIR='$(CURDIR)' PATH="$(shell $(PG_CONFIG) --bindir):$$PATH" PGPORT='6$(DEF_PGPORT)' top_builddir='$(CURDIR)/$(top_builddir)' PG_REGRESS='$(pgxsdir)/src/test/regress/pg_regress' $(PROVE) $(PG_PROVE_FLAGS) $(PROVE_FLAGS) $(or $(PROVE_TESTS),t/*.pl)
	$(MAKE) -C bdr_toy -f ${bdr_abs_srcdir}/bdr_toy/Makefile VPATH=${bdr_abs_srcdir}/bdr_toy clean
else
$(pgxsdir)/src/test/perl/PostgresNode.pm:
	@[ -e $(pgxsdir)/src/test/perl/PostgresNode.pm ] || ( echo -e "----ERROR----\nCannot run prove_check, copy src/test/perl/* to $(pgxsdir)/src/test/perl/ and retry\n-------------" && exit 1)

prove_check: $(pgxsdir)/src/test/perl/PostgresNode.pm
	$(MAKE) -C bdr_toy -f ${bdr_abs_srcdir}/bdr_toy/Makefile VPATH=${bdr_abs_srcdir}/bdr_toy install
	rm -rf $(CURDIR)/tmp_check/
	rm -rf $(CURDIR)/tmp_tap_tests/
	mkdir $(CURDIR)/tmp_tap_tests/
	cp -r t/ $(CURDIR)/tmp_tap_tests/

#   Instead of maintaining multiple versions of TAP test files, we generate
#   test files for PG versions less than 15 with simple sed commands.

	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/tmp_tap_tests/t/*.pl
	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/tmp_tap_tests/t/common/*.pl
	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/tmp_tap_tests/t/utils/*.pm
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/tmp_tap_tests/t/*.pl
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/tmp_tap_tests/t/common/*.pl
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/tmp_tap_tests/t/utils/*.pm

 #	The above set of sed commands will bring all the TAP tests prior to
 #  https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=b3b4d8e68ae83f432f43f035c7eb481ef93e1583

	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/tmp_tap_tests/t/*.pl
	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/tmp_tap_tests/t/common/*.pl
	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/tmp_tap_tests/t/utils/*.pm

 #	The above set of sed commands will bring all the TAP tests prior to
 #  https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=201a76183e2056c2217129e12d68c25ec9c559c8

 #	Now, we are ready with TAP tests for PG versions less than 15.
	cd $(srcdir) && TESTDIR='$(CURDIR)' PATH="$(shell $(PG_CONFIG) --bindir):$$PATH" PGPORT='6$(DEF_PGPORT)' top_builddir='$(CURDIR)/$(top_builddir)' PG_REGRESS='$(pgxsdir)/src/test/regress/pg_regress' $(PROVE) $(PG_PROVE_FLAGS) $(PROVE_FLAGS) $(or $(PROVE_TESTS),tmp_tap_tests/t/*.pl)

	rm -rf $(CURDIR)/tmp_tap_tests/
	$(MAKE) -C bdr_toy -f ${bdr_abs_srcdir}/bdr_toy/Makefile VPATH=${bdr_abs_srcdir}/bdr_toy clean
endif

# Disabled because these tests require "wal_level=logical" and other custom
# settings (see bdr_regress.conf file), which typical installcheck users do not
# have (e.g. buildfarm clients).
installcheck:
	@echo "Cannot run installcheck as tests need custom configuration"

distdir = bdr-$(BDR_VERSION)
git-dist: clean
	rm -f .distgitrev .distgittag
	if ! git diff-index --quiet HEAD; then echo >&2 "WARNING: git working tree has uncommitted changes to tracked files which were INCLUDED"; fi
	if [ -n "`git ls-files --exclude-standard --others`" ]; then echo >&2 "WARNING: git working tree has unstaged files which were IGNORED!"; fi
	echo $(GITHASH) > .distgitrev
	git name-rev --tags --name-only `cat .distgitrev` > .distgittag
	git ls-tree -r -t --full-tree HEAD --name-only |\
	  tar cjf "${distdir}.tar.bz2" --no-recursion --owner=root --group=root --mode=u=rwX,go=rX --transform="s|^|${distdir}/|" -T - \
	    .distgitrev .distgittag
	echo >&2 "Prepared ${distdir}.tar.bz2 for rev=`cat .distgitrev`, tag=`cat .distgittag`"
	rm -f .distgitrev .distgittag

distclean maintainer-clean: clean
# 	Place the maintainer-clean before removing
# 	Makefile.global down below because they need Makefile.global.
	rm -f config.status config.log
	rm -f bdr_config_generated.h Makefile Makefile.global
	rm -f run_tests
	rm -rf autom4te.cache/

.PHONY: all check regress_check prove_check installcheck git-dist distclean maintainer-clean
