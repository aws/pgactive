# -*-makefile-*-
# Makefile.in
# @configure_input@

# configure output
pgactive_PGVERCOMPAT_INCDIR=@pgactive_PGVERCOMPAT_INCDIR@
pgactive_PG_MAJORVERSION=@pgactive_PG_MAJORVERSION@
# end configure output

pgactive_subdir = .
pgactive_top_builddir = .

MODULE_big = pgactive
EXTENSION = pgactive
DATA = pgactive--2.1.0.sql
SCRIPTS_built = pgactive_init_copy pgactive_dump
EXTRA_CLEAN = src/pgactive_init_copy$(X) src/pgactive_init_copy.o include/pgactive_version.h .distgitrev \
	test/tmp_check test/results test/log test/tmp_t \
	test/regression.diffs test/regression.out \
	pgactive_init_copy_postgres.log home tmp_test_* \
	pgactive_dump$(X) $(pgactive_DUMP_OBJS) \
	${distdir}.tar.bz2

# When in development add -Werror.
PG_CPPFLAGS = -I$(srcdir)/include -I$(srcdir)/src/$(pgactive_PGVERCOMPAT_INCDIR) -I$(libpq_srcdir) -Wall -Wmissing-prototypes -Wmissing-declarations $(EXTRA_CFLAGS)
SHLIB_LINK = $(libpq)

OBJS = src/pgactive.o \
	src/pgactive_apply.o \
	src/pgactive_dbcache.o \
	src/pgactive_ddlrep.o \
	src/pgactive_ddlrep_truncate.o \
	src/pgactive_perdb.o \
	src/pgactive_catalogs.o \
	src/pgactive_conflict_handlers.o \
	src/pgactive_conflict_logging.o \
	src/pgactive_commandfilter.o \
	src/pgactive_common.o \
	src/pgactive_compat.o \
	src/pgactive_count.o \
	src/pgactive_executor.o \
	src/pgactive_init_replica.o \
	src/pgactive_locks.o \
	src/pgactive_node_identifier.o \
	src/pgactive_nodecache.o \
	src/pgactive_messaging.o \
	src/pgactive_monitoring.o \
	src/pgactive_output.o \
	src/pgactive_protocol.o \
	src/pgactive_relcache.o \
	src/pgactive_remotecalls.o \
	src/pgactive_seq.o \
	src/pgactive_shmem.o \
	src/pgactive_supervisor.o \
	src/pgactive_user_mapping.o

ifdef RUN_FAILING_TESTS
# Empty if there aren't any expected-to-fail tests at the moment.
FAILING_TESTS :=
else
# By default we don't run failing tests, this will always be empty.
FAILING_TESTS :=
endif

# DDL tests run via transparent DDL replication.
DDLTESTS := ddl_enable_ddl \
	ddl_create \
	ddl_alter_table \
	ddl_extension \
	ddl_function \
	ddl_grant \
	ddl_mixed \
	ddl_namespace \
	ddl_sequence \
	ddl_replication_set \
	ddl_view \
	ddl_disable_ddl

# DDL tests run via pgactive.pgactive_replicate_ddl_command wrapper.
DDLTESTS_FUNC := ddl_fn/ddl_enable_ddl \
	ddl_fn/ddl_create \
	ddl_fn/ddl_alter_table \
	ddl_fn/ddl_extension \
	ddl_fn/ddl_function \
	ddl_fn/ddl_grant \
	ddl_fn/ddl_mixed \
	ddl_fn/ddl_namespace \
	ddl_fn/ddl_sequence \
	ddl_fn/ddl_replication_set \
	ddl_fn/ddl_view \
	ddl_fn/ddl_disable_ddl

REGRESSCHECKS = init \
	preseed \
	init_pgactive \
	guc \
	schema \
	preseed_check \
	supervisordb \
	identifier \
	schema_desync \
	replorigin_filter \
	pause \
	catalog \
	terminate \
	skipchanges \
	seq \
	read_only \
	$(FAILING_TESTS) \
	ddl_lock \
	$(DDLTESTS) \
	$(DDLTESTS_FUNC) \
	dml_basic \
	dml_contrib \
	dml_delete_pk \
	dml_extended \
	dml_replicate_ddl_command \
	dml_missing_pk \
	dml_toasted \
	detach_pgactive

# Can only be built using pgxs
USE_PGXS=1

pgactive_abs_srcdir := @abs_srcdir@
PG_CONFIG :=@PG_CONFIG@
PGXS := $(shell $(PG_CONFIG) --pgxs)

vpath_build=@vpath_build@
ifeq ($(vpath_build),yes)
	VPATH := $(pgactive_abs_srcdir)/$(pgactive_subdir)
	USE_VPATH :=$(VPATH)
endif
GIT_WORK_TREE=${pgactive_abs_srcdir}
GIT_DIR=${pgactive_abs_srcdir}/.git
export GIT_DIR
export GIT_WORK_TREE

include $(PGXS)

pgactive_VERSION=$(shell awk '/^.define pgactive_VERSION / { print $3; }' ${pgactive_abs_srcdir}/pgactive_version.h.in | cut -d '"' -f 2)

$(info Building against PostgreSQL $(MAJORVERSION))

export PG_CONFIG
export PATH

# Modules such as btree_gist, cube, hstore and pg_trgm are used by pgactive in
# tests, i.e. if they aren't available the tests start to fail. Therefore,
# it is not required to error out.
REQUIRED_TEST_EXTENSIONS = btree_gist cube hstore pg_trgm

pgactive_DUMP_DIR := src/compat/$(pgactive_PG_MAJORVERSION)/pg_dump
pgactive_DUMP_OBJS = $(pgactive_DUMP_DIR)/pg_dump.o \
	$(pgactive_DUMP_DIR)/common.o \
	$(pgactive_DUMP_DIR)/pg_dump_sort.o \
	$(pgactive_DUMP_DIR)/pg_backup_archiver.o \
	$(pgactive_DUMP_DIR)/pg_backup_db.o \
	$(pgactive_DUMP_DIR)/pg_backup_custom.o \
	$(pgactive_DUMP_DIR)/pg_backup_null.o \
	$(pgactive_DUMP_DIR)/pg_backup_tar.o \
	$(pgactive_DUMP_DIR)/pg_backup_directory.o \
	$(pgactive_DUMP_DIR)/pg_backup_utils.o \
	$(pgactive_DUMP_DIR)/parallel.o \
	$(pgactive_DUMP_DIR)/dumputils.o \
	$(pgactive_DUMP_DIR)/compress_io.o

pgactive_DUMP_LIBS = $(shell $(PG_CONFIG) --libs) -lpgfeutils

ifneq ($(wildcard $(pgactive_DUMP_DIR)/compress_lz4.c),)
	pgactive_DUMP_OBJS += $(pgactive_DUMP_DIR)/compress_lz4.o
endif

ifneq ($(wildcard $(pgactive_DUMP_DIR)/compress_gzip.c),)
	pgactive_DUMP_OBJS += $(pgactive_DUMP_DIR)/compress_gzip.o
endif

ifneq ($(wildcard $(pgactive_DUMP_DIR)/compress_none.c),)
	pgactive_DUMP_OBJS += $(pgactive_DUMP_DIR)/compress_none.o
endif

ifneq ($(wildcard $(pgactive_DUMP_DIR)/compress_zstd.c),)
	pgactive_DUMP_OBJS += $(pgactive_DUMP_DIR)/compress_zstd.o
endif

# string_utils.c file is needed by pg_dump so we copied it from postgres source
# code src/fe_utils/ and placed it under
# src/compat/$(pgactive_PG_MAJORVERSION)/pg_dump to make pg_dump a self-reliant
# component while compiling pgactive source code.
pgactive_DUMP_OBJS += $(pgactive_DUMP_DIR)/string_utils.o

pgactive_dump: $(pgactive_DUMP_OBJS)
	$(CC) $(CFLAGS) $(pgactive_DUMP_OBJS) $(libpq_pgport) $(LDFLAGS) $(LDFLAGS_EX) $(pgactive_DUMP_LIBS) -o $@$(X)

pgactive_init_copy: src/pgactive_init_copy.o src/pgactive_common.o
	$(CC) $(CFLAGS) $^ $(LDFLAGS) $(LDFLAGS_EX) $(libpq_pgport) -o $@$(X)

DATE=$(shell date "+%Y-%m-%d")
GITHASH=$(shell if [ -e .distgitrev ]; then cat .distgitrev; else GIT_DIR=${pgactive_abs_srcdir}/.git git rev-parse --short HEAD; fi)

pgactive_version.h: include/pgactive_version.h.in
	sed -r '0,/pgactive_VERSION_DATE/s,(pgactive_VERSION_DATE).,\1 "$(DATE)",;0,/pgactive_VERSION_GITHASH/s,(pgactive_VERSION_GITHASH).,\1 "$(GITHASH)",' include/pgactive_version.h.in > include/pgactive_version.h

src/pgactive.o: pgactive_version.h

# Ensure Makefiles are up to date.
Makefile: Makefile.in config.status configure
	./config.status $@

run_tests: run_tests.in  config.status configure
	./config.status $@

configure: configure.in
	cd ${pgactive_abs_srcdir} && autoreconf

all: pgactive_init_copy pgactive_dump

check: regress_check prove_check

regress_check: all install
	mkdir -p test/results/ddl test/results/ddl_fn test/results/dml

	./test/run_tests --config $(pgactive_abs_srcdir)/test/pgactive_regress.conf \
		--testbinary src/test/regress/pg_regress \
		$(REGRESSCHECKS)

# To run prove, we need to install a couple of things that are not usually
# copied from the postgres source tree to the install tree, namely all of
# src/test/perl needs to be copied to lib/postgresql/pgxs/src/test/perl/.
#
# This isn't done by postgres's install command, which doesn't know how to
# install them. So you'll have to copy them manually or patch your postgres
# tree to install them:
# https://www.postgresql.org/message-id/CAMsr%2BYFXv%2B2qne6xJW7z_25mYBtktRX5rpkrgrb%2pgactivegQ_FxgHQ@mail.gmail.com
ifeq ($(shell test $(MAJORVERSION) -ge 16; echo $$?),0)
$(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm:
	@[ -e $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm ] || ( echo -e "----ERROR----\nCannot run prove_check, copy src/test/perl/* to $(pgxsdir)/src/test/perl/ and retry\n-------------" && exit 1)

prove_check: $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm
	rm -rf $(CURDIR)/test/tmp_check/
	cd $(srcdir) && TESTDATADIR='$(CURDIR)/test/tmp_check' TESTLOGDIR='$(CURDIR)/test/tmp_check/log' PATH="$(shell $(PG_CONFIG) --bindir):$$PATH" PGPORT='6$(DEF_PGPORT)' top_builddir='$(CURDIR)/$(top_builddir)' PG_REGRESS='$(pgxsdir)/src/test/regress/pg_regress' $(PROVE) $(PG_PROVE_FLAGS) $(PROVE_FLAGS) $(or $(PROVE_TESTS),test/t/*.pl)

else
ifeq ($(shell test $(MAJORVERSION) -eq 15; echo $$?),0)
$(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm:
	@[ -e $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm ] || ( echo -e "----ERROR----\nCannot run prove_check, copy src/test/perl/* to $(pgxsdir)/src/test/perl/ and retry\n-------------" && exit 1)

prove_check: $(pgxsdir)/src/test/perl/PostgreSQL/Test/Cluster.pm
	rm -rf $(CURDIR)/test/tmp_check/
	cd $(srcdir) && TESTDIR='$(CURDIR)/test' PATH="$(shell $(PG_CONFIG) --bindir):$$PATH" PGPORT='6$(DEF_PGPORT)' top_builddir='$(CURDIR)/$(top_builddir)' PG_REGRESS='$(pgxsdir)/src/test/regress/pg_regress' $(PROVE) $(PG_PROVE_FLAGS) $(PROVE_FLAGS) $(or $(PROVE_TESTS),test/t/*.pl)
else
$(pgxsdir)/src/test/perl/PostgresNode.pm:
	@[ -e $(pgxsdir)/src/test/perl/PostgresNode.pm ] || ( echo -e "----ERROR----\nCannot run prove_check, copy src/test/perl/* to $(pgxsdir)/src/test/perl/ and retry\n-------------" && exit 1)

prove_check: $(pgxsdir)/src/test/perl/PostgresNode.pm
	rm -rf $(CURDIR)/test/tmp_check/
	rm -rf $(CURDIR)/test/tmp_t/
	mkdir $(CURDIR)/test/tmp_t/
	cp -r test/t/ $(CURDIR)/test/tmp_t/

#   Instead of maintaining multiple versions of TAP test files, we generate
#   test files for PG versions less than 15 with simple sed commands.

	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/test/tmp_t/t/*.pl
	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/test/tmp_t/t/common/*.pl
	sed -i 's/PostgreSQL::Test::Cluster/PostgresNode/g' $(CURDIR)/test/tmp_t/t/utils/*.pm
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/test/tmp_t/t/*.pl
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/test/tmp_t/t/common/*.pl
	sed -i 's/PostgreSQL::Test::Utils/TestLib/g' $(CURDIR)/test/tmp_t/t/utils/*.pm

 #	The above set of sed commands will bring all the TAP tests prior to
 #  https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=b3b4d8e68ae83f432f43f035c7eb481ef93e1583

	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/test/tmp_t/t/*.pl
	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/test/tmp_t/t/common/*.pl
	sed -i 's/PostgresNode->new/get_new_node/g' $(CURDIR)/test/tmp_t/t/utils/*.pm

 #	The above set of sed commands will bring all the TAP tests prior to
 #  https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=201a76183e2056c2217129e12d68c25ec9c559c8

 #	Now, we are ready with TAP tests for PG versions less than 15.
	cd $(srcdir) && TESTDIR='$(CURDIR)/test' PATH="$(shell $(PG_CONFIG) --bindir):$$PATH" PGPORT='6$(DEF_PGPORT)' top_builddir='$(CURDIR)/$(top_builddir)' PG_REGRESS='$(pgxsdir)/src/test/regress/pg_regress' $(PROVE) $(PG_PROVE_FLAGS) $(PROVE_FLAGS) $(or $(PROVE_TESTS),test/tmp_t/t/*.pl)

	rm -rf $(CURDIR)/test/tmp_t/
endif
endif

# Disabled because these tests require "wal_level=logical" and other custom
# settings (see test/pgactive_regress.conf file), which typical installcheck users
# do not have (e.g. buildfarm clients).
installcheck:
	@echo "Cannot run installcheck as tests need custom configuration"

distdir = pgactive-$(pgactive_VERSION)
git-dist: clean
	rm -f .distgitrev .distgittag
	if ! git diff-index --quiet HEAD; then echo >&2 "WARNING: git working tree has uncommitted changes to tracked files which were INCLUDED"; fi
	if [ -n "`git ls-files --exclude-standard --others`" ]; then echo >&2 "WARNING: git working tree has unstaged files which were IGNORED!"; fi
	echo $(GITHASH) > .distgitrev
	git name-rev --tags --name-only `cat .distgitrev` > .distgittag
	git ls-tree -r -t --full-tree HEAD --name-only |\
	  tar cjf "${distdir}.tar.bz2" --no-recursion --owner=root --group=root --mode=u=rwX,go=rX --transform="s|^|${distdir}/|" -T - \
	    .distgitrev .distgittag
	echo >&2 "Prepared ${distdir}.tar.bz2 for rev=`cat .distgitrev`, tag=`cat .distgittag`"
	rm -f .distgitrev .distgittag

distclean maintainer-clean: clean
# Place the maintainer-clean before removing Makefile down below because they
# need Makefile.
	rm -f config.status config.log
	rm -f include/pgactive_config_generated.h Makefile
	rm -f test/run_tests
	rm -rf autom4te.cache/

.PHONY: all check regress_check prove_check installcheck git-dist distclean maintainer-clean
