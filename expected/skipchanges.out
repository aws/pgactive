\c regression
SELECT bdr.bdr_replicate_ddl_command($DDL$
CREATE TABLE public.test_replication(id integer not null primary key, atlsn pg_lsn default pg_current_wal_insert_lsn());
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

INSERT INTO test_replication(id) VALUES (1);
-- Error cases
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/0')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
ERROR:  skipping changes is unsafe and will cause replicas to be out of sync
HINT:  Set bdr.skip_ddl_replication if you are sure you want to do this.
SET bdr.skip_ddl_replication = on;
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/0')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
ERROR:  target LSN must be nonzero
-- Access a bogus node.
-- Needs a wrapper because of the dynamic content in the error message.
\set VERBOSITY terse
DO LANGUAGE plpgsql
$$
DECLARE
  errm text;
BEGIN
  PERFORM bdr.skip_changes_upto('0', 0, 1234, '0/1');
EXCEPTION
  WHEN others THEN
    GET STACKED DIAGNOSTICS
       errm = MESSAGE_TEXT;
    IF errm LIKE 'replication origin "bdr_0_0_%" does not exist' THEN
      RAISE EXCEPTION 'Got expected error from bdr.skip_changes_upto()';
    ELSE
      RAISE;
    END IF;
END;
$$;
ERROR:  Got expected error from bdr.skip_changes_upto()
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/1')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) = bdr.bdr_get_local_nodeid();
ERROR:  passed ID is for the local node, can't skip changes from self
-- Skipping the past must do nothing. The LSN isn't exposed in
-- pg_replication_identifier so this'll just produce no visible result, but not
-- break anything.
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/1')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
 skip_changes_upto 
-------------------
 
(1 row)

